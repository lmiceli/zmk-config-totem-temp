//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "includes/mouse.dtsi"
#include "includes/combo.dtsi"
#include "includes/todo.dtsi"
// todo, add mouse and fix numbers
// todo merge in one repo
// todo urob
// https://github.com/urob/zmk-config?tab=readme-ov-file

#define BASE    0
#define NAV     1
#define ARROW   2
#define MOU     3
#define SYM     4
#define NUM     5
#define FUN     6

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

// Extra key bindings
#define SWP_POS 23 // for alt tab companion (&kp LS(TAB))

/ {
behaviors {
    as: auto_shift {
    compatible = "zmk,behavior-hold-tap";
    label = "AUTO_SHIFT";
    #binding-cells = <2>;
    tapping-term-ms = <135>;
    quick-tap-ms = <0>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&kp>;
};

hm: homerow_mods {
    compatible = "zmk,behavior-hold-tap";
    label = "HOMEROW_MODS";
    #binding-cells = <2>;
    tapping-term-ms = <175>;
    quick-tap-ms = <0>;
    require-prior-idle-ms = <75>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&kp>;
};

hmp: homerow_mods_pinky {
    compatible = "zmk,behavior-hold-tap";
    label = " ";
    #binding-cells = <2>;
    tapping-term-ms = <200>;
    quick-tap-ms = <0>;
    require-prior-idle-ms = <75>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&kp>;
};
};

// Swapper for smart alt+tab
swapper: swapper {
        compatible = "zmk,behavior-smart-toggle";
        #binding-cells = <0>;
        bindings = <&kp LALT>, <&kp TAB>;
        // things that should not close alt tab ui (shit tab and arrows)
        ignored-key-positions = <SWP_POS 16 17 18 7>;
        // for some reason this format is not working
        // ignored-key-positions = <SWP_POS SW09 SW08 SW07 SW03>; 
};

combos {
compatible = "zmk,combos";

COMBO(vol_up, &kp C_VOL_UP, _F _T)
COMBO(vol_dn, &kp C_VOL_DN, _P _S)

// wip migrate this next, or change them for others
combo_med_next {
        timeout-ms = <50>;
        key-positions = <2 3>;//FP
        bindings = <&kp C_NEXT>;
};

combo_med_prev {
        timeout-ms = <50>;
        key-positions = <1 2>;//WF
        bindings = <&kp C_PREV>;
};

combo_med_pp {
        timeout-ms = <50>;
        key-positions = <1 4>;//WB
        bindings = <&kp C_PP>;
};

combo_med_stop {
        timeout-ms = <50>;
        key-positions = <1 3>;//WP
        bindings = <&kp C_STOP>;
};

// combo_med_vol_up {
//         timeout-ms = <50>; 
//         key-positions = <2 13>;// FT
//         bindings = <&kp C_VOL_UP>;
// };

// combo_med_vol_dn {
//         timeout-ms = <50>; 
//         key-positions = <3 12>;// PS
//         bindings = <&kp C_VOL_DN>;
// };

combo_med_mute {
        timeout-ms = <50>; 
        key-positions = <12 14>;// SG
        bindings = <&kp C_MUTE>;
        };
};

#include "includes/base.dtsi"

keymap {
compatible = "zmk,keymap";

BASE {
bindings = <
           __CTRL_Q_  ____W____  ____F____  ____P____  ____B____           ____J____  ____L____  ____U____  ____Y____  __CA_BS__

           ____A____  _H_ALT_R_  _H_GUI_S_  _H_SHF_T_  ____G____           ____M____  _H_SHF_N_  _H_GUI_E_  _H_ALT_I_  __FUN_O__

__ENTER__  ____Z____  ____X____  ____C____  ____D____  ____V____           ____K____  ____H____  __COMMA__  ___DOT___  __FSLH___  __BSPC___

                                    __NAV_ESC  __ARR_SPC  __MOU_TAB     __NUM_BSP  __SYM_ENT  __LGI_DEL
>;
};

NAV {
bindings = <
      &none           &mkp MB3          &mkp MB2        &mkp MB1           &none                   &kp LC(LA(LG(N1)))  &kp LC(LA(LG(N2)))  &kp LC(LA(LG(N3)))  &kp LC(LA(LG(N4)))  &kp LC(LA(LG(N5)))
      &msc SCRL_DOWN  &kp LC(LG(LEFT))  &kp LC(LG(UP))  &kp LC(LG(RIGHT))  &msc SCRL_UP            &kp LG(PLUS)        &kp LC(LEFT)        &kp LC(RIGHT)       &kp C_VOL_DN        &kp C_VOL_UP
&none &none           &msc SCRL_LEFT    &none           &msc SCRL_RIGHT    &none                   &kp LG(MINUS)       &kp LS(LC(COMMA))   &kp LS(LC(DOT))     &kp C_PLAY          &kp C_MUTE         &none
  
                                        &none           &none              &none                   &kp LG(LA(LEFT))    &kp LS(LC(DELETE))  &kp LA(LG(RIGHT))
>;
};

ARROW {
bindings = <
      &kp LCTRL     &mkp MB3  &mkp MB2    &mkp MB1   &none                          &kp PG_UP        &kp HOME  &kp UP    &kp END    &kp PG_DN
      &kp LA(LEFT)  &kp LALT  &kp LGUI    &kp LSHFT  &kp LA(RIGHT)                  &kp F11          &kp LEFT  &kp DOWN  &kp RIGHT  &kp CAPS
&none &none         &none     &kp LS(TAB) &swapper   &none                          &kp LG(PAGE_UP)  &kp F7    &kp F8    &kp F9     &kp LG(PAGE_DOWN) &none
                   
                                    &none  &none   &none                            &kp DEL  &kp BSPC    &none
>;
};

MOU {
bindings = <
        &kp LCTRL    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none                             &none     &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &none
        &none        &kp LALT      &kp LGUI      &kp LSHFT     &none                             &none     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
&none   &bootloader  &sys_reset    &none         &bt BT_CLR    &bt BT_CLR_ALL                    &none     &msc SCRL_LEFT  &none           &msc SCRL_RIGHT  &none  &none

                              &trans       &none         &trans                                 &mkp MB2  &mkp MB1  &mkp MB3
>;
};

SYM {
bindings = <
          &kp SQT    &kp LT     &kp GT     &kp DQT        &kp DOT                           &kp AMPS   &kp LBKT  &kp RBKT  &kp SEMICOLON  &kp PERCENT
          &kp EXCL   &kp MINUS  &kp PLUS   &kp EQUAL      &kp HASH                          &kp PIPE   &kp LPAR  &kp RPAR  &kp COLON      &kp QUESTION
&none     &kp CARET  &kp FSLH   &kp ASTRK  &kp BACKSLASH  &kp GRAVE                         &kp TILDE  &kp LBRC  &kp RBRC  &kp DOLLAR     &kp AT &none

                                &kp BSPC   &kp UNDERSCORE &kp LGUI                          &none      &none     &none
>;
};

NUM {
bindings = <
        &none   &kp N7  &kp N8  &kp N9         &none         &none  &none      &none     &none     &kp LCTRL
        &kp N0  &kp N4  &kp N5  &kp N6         &none         &none  &kp LSHFT  &kp LGUI  &kp LALT  &none
&none   &none   &kp N1  &kp N2  &kp N3         &none         &none  &none      &none     &none     &none &none

                &kp BACKSPACE  &kp SPACE  &kp ENTER         &none  &none  &none
>;
};

FUN {
bindings = <
           &kp F12  &kp F7  &kp F8  &kp F9   &kp PSCRN                     &bt BT_CLR_ALL  &none      &none     &kp LCTRL   &none
           &kp F11  &kp F4  &kp F5  &kp F6   &kp SLCK                      &none           &kp LSHFT  &kp LGUI  &kp LALT    &none
&kp ENTER  &kp F10  &kp F1  &kp F2  &kp F3   &kp PAUSE_BREAK               &none           &none      &none     &sys_reset  &bootloader &none

                                 &kp ESC  &kp SPACE  &kp TAB               &kp BACKSPACE   &kp ENTER  &kp DEL
>;
};
};
};
